# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fRgh2TpXlWGN0syO4dH7RswM9w4qRBqR
"""

import numpy as np
import json
from sklearn.model_selection import train_test_split, cross_validate,StratifiedKFold
from pickle import load
from numpy import array
import pandas as pd
import numpy as np
import ast
import string
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import svm
from sklearn import metrics
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix,roc_auc_score
import seaborn as sns
from sklearn.preprocessing import StandardScaler
import xgboost as xgb
from sklearn.manifold import TSNE

from google.colab import files
uploaded = files.upload()

df_ctgan = pd.read_csv("gen_sample_model1.csv")

print(df_ctgan.shape)

from google.colab import drive
drive.mount('/content/gdrive')

import os
os.chdir('/content/gdrive/My Drive/Bitcoin')

df_features = pd.read_csv("elliptic_txs_features.csv")
df_edgelist = pd.read_csv("elliptic_txs_edgelist.csv")
df_classes =  pd.read_csv("elliptic_txs_classes.csv")



df_features=pd.DataFrame(df_features.values, columns = ["Feature {}".format(i) for i in range(df_features.shape[1])])
df_features

df_features["label"]=df_classes[["class"]]
df_labelled=df_features.loc[df_features['label'].isin(["1","2"])]
df_labelled["label"].replace({"1": 1, "2": 2}, inplace=True)
df = df_labelled
df

df_ctgan = df_ctgan.iloc[:,1:]
df_ctgan

df_org1 = df[df["label"]==1]
df_org1 = df_org1.iloc[:,:-1]
df_org1

df_org1 = df_org1.iloc[:,2:]
df_org1

from scipy import stats
df_t = df.iloc[:,2:]
df = df_t[(np.abs(stats.zscore(df_t)) < 5).all(axis=1)]

feature_select = ["Feature 71","Feature 16","Feature 37","Feature 65","Feature 59","Feature 8","Feature 73","Feature 77","Feature 43","Feature 83","Feature 35","Feature 72","Feature 74","Feature 38","Feature 36","Feature 25","Feature 127","Feature 49","Feature 103","Feature 31","label"]

df_otlrm = df.loc[:,feature_select]
df_otlrm

X = df.iloc[:,:-1]
y = df.iloc[:,[-1]]
""" Usinge SMOTE"""
from imblearn.over_sampling import SMOTE 
sm = SMOTE(random_state = 2) 
X_res, y_res = sm.fit_sample(X, y) 
  
print('After OverSampling, the shape of train_X: {}'.format(X_res.shape)) 
print('After OverSampling, the shape of train_y: {} \n'.format(y_res.shape)) 
  
print("After OverSampling, counts of label '1': {}".format(sum(y_res == 1))) 
print("After OverSampling, counts of label '2': {}".format(sum(y_res == 2)))

print(df_ctgan.shape)
print(df_org1.shape)

from os import name
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import os
import glob
from sklearn.utils import shuffle
import seaborn as sns
from sklearn.datasets import make_moons
import os
import numpy as np
import pandas as pd

"""Plot TSNE"""

class ReadDatasets():
    def __init__(self, gendata_path, actualdata_path=None):
        self.data = gendata_path
        #self.preprocess(self.data)
        #if isinstance(actualdata_path, str):
        self.data2 = actualdata_path
        #self.preprocess(self.data2)
        print(self.data.shape)
        print(self.data2.shape)
        
    def preprocess(self, df):
        if 'Unnamed: 0' in list(df.columns.values):
            df.drop(['Unnamed: 0'], axis=1, inplace=True)

    def plot_tsne(self, name="ud", plotpath=None):
        gendata = self.data
        actual = self.data2
        if gendata.shape[0]!=actual.shape[0]:
            if gendata.shape[0]>actual.shape[0]:
                gendata = gendata.iloc[:actual.shape[0],:]
            else:
                actual = actual.iloc[:gendata.shape[0],:]
        n_patients, n_genes = gendata.shape
        label1 = ["Generated Data"]*n_patients
        label2 = ["Actual Data"]*n_patients
        labels = pd.Series(label1+label2).to_frame()
        dfeatures = pd.concat([gendata, actual], ignore_index=True,
                              axis=0, sort=False)
        X_embedded = TSNE(n_components=2, random_state=0,
                          perplexity=100).fit_transform(dfeatures)
        X_embedded = pd.DataFrame(X_embedded, columns=['dim1', 'dim2'])
        X_embedded = pd.DataFrame(
            np.hstack([np.array(X_embedded), np.array(labels)]))
        X_embedded.columns = ['dim1', 'dim2', 'label']

        sns_fig = sns.lmplot(x='dim1', y='dim2', data=X_embedded, fit_reg=False, hue='label')
        filename = "tsne_plot_"
        filename = filename + name + ".png"
        plt.show()#(filename)
        #plt.close()

    def plot_tsne2(self, name="ud", plotpath=None):
        actual = self.data2
        n_patients, n_genes = actual.shape
        label2 = ["Actual Data"]*n_patients
        labels = pd.Series(label2).to_frame()
        #dfeatures = pd.concat([gendata, actual], ignore_index=True,
        #                     axis=0, sort=False)
        X_embedded = TSNE(n_components=2, random_state=0,
                          perplexity=100).fit_transform(actual)
        X_embedded = pd.DataFrame(X_embedded, columns=['dim1', 'dim2'])
        X_embedded = pd.DataFrame(
            np.hstack([np.array(X_embedded), np.array(labels)]))
        X_embedded.columns = ['dim1', 'dim2', 'label']

        sns_fig = sns.lmplot(x='dim1', y='dim2', data=X_embedded, fit_reg=False, hue='label')
        filename = "tsne_plot_"
        filename = filename + name + ".png"
        plt.savefig(filename)
        plt.close()


if __name__=="__main__":
    rd = ReadDatasets(df_ctgan.iloc[:,:],df_org1.iloc[:,:])
    # print(X_res.shape,y_res.shape)
    # y_res = y_res.reshape((-1,1))
    # df_sm_ = pd.DataFrame(np.concatenate((X_res,y_res),axis=1),columns=df.columns,index=None)
    # df_sm = df_sm_[df_sm_["label"]==1].iloc[:,:-1]
    # df_sm = shuffle(df_sm)
    # df_sm = shuffle(df_sm)
    # df_sm = shuffle(df_sm)
    # df_org = df[df["label"]==1].iloc[:,:-1]
    # rd = ReadDatasets(df_sm.iloc[:,:],df_org.iloc[:,:])
    rd.plot_tsne(name="org5")

df = df.iloc[:,2:]
df

df_ctgan["label"] = 1
df_ctgan

df = pd.concat([df, df_ctgan])
df

import sklearn
df = sklearn.utils.shuffle(df)
df

X = df.iloc[:,:-1]
y = df.iloc[:,[-1]]

y

print(X_res.shape, y_res.shape)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.3)

from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
import sklearn
from sklearn.neural_network import MLPClassifier
clf = MLPClassifier().fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
print(sklearn.metrics.f1_score(y_test, y_pred, average=None))
metrics.plot_roc_curve(clf, X_test, y_test)  # doctest: +SKIP
#plt.savefig("roc_rf")
plt.show()  
roc_auc_score(y_test, y_pred)

df_tlol = df.loc[df["label"]==1]
df_tlol = df_tlol.iloc[:,:-1]
df_tlol

df_tlol.to_csv("label1_trans.csv")

X = df.iloc[:,2:-1]
y = df.iloc[:,[-1]]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.3)

from imblearn.over_sampling import SMOTE 
sm = SMOTE(random_state = 2) 
X_train_res, y_train_res = sm.fit_sample(X_train, y_train) 
  
print('After OverSampling, the shape of train_X: {}'.format(X_train_res.shape)) 
print('After OverSampling, the shape of train_y: {} \n'.format(y_train_res.shape)) 
  
print("After OverSampling, counts of label '1': {}".format(sum(y_train_res == 1))) 
print("After OverSampling, counts of label '2': {}".format(sum(y_train_res == 2)))

from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
clf = RandomForestClassifier().fit(X_train_res, y_train_res)
y_pred = clf.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
metrics.plot_roc_curve(clf, X_test, y_test)  # doctest: +SKIP
#plt.savefig("roc_rf")
plt.show()  
roc_auc_score(y_test, y_pred)

from sklearn.mixture import GaussianMixture
from sklearn.decomposition import PCA

df_t = df_tlol#(df.loc[df["label"]==1]).iloc[:,2:-1]
df_x = df_t
df_l = df_t.values
print(df_l.shape)
#pca = PCA(0.99)
#data = pca.fit_transform(df_l)
gmm = GaussianMixture(6, covariance_type='full')
# n_components = np.arange(1, 21)
# models = [GaussianMixture(n, covariance_type='full', random_state=0).fit(df_l)
#           for n in n_components]


gmm.fit(df_l)
print(gmm.converged_)
data_new = gmm.sample(20000)
print(data_new[0])
#digits_new = pca.inverse_transform(data_new[0])
df2_gen = pd.DataFrame(data_new[0], columns=df_x.columns, index=None)
df2_gen

plt.plot(n_components, [m.bic(df_l) for m in models], label='BIC')
plt.plot(n_components, [m.aic(df_l) for m in models], label='AIC')
plt.legend(loc='best')
plt.xlabel('n_components')
plt.show()

df_tlol = df.loc[df["label"]==1]
df_tlol = df_tlol.iloc[:,2:-1]
print(df2_gen.shape)
print(df_tlol.shape)
df_tlol

from os import name
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import os
import glob
import seaborn as sns
from sklearn.datasets import make_moons
import os
import numpy as np
import pandas as pd

class ReadDatasets():
    def __init__(self, gendata_path, actualdata_path=None):
        self.data = gendata_path
        #self.preprocess(self.data)
        #if isinstance(actualdata_path, str):
        self.data2 = actualdata_path
        #self.preprocess(self.data2)
        print(self.data.shape)
        print(self.data2.shape)
        
    def preprocess(self, df):
        if 'Unnamed: 0' in list(df.columns.values):
            df.drop(['Unnamed: 0'], axis=1, inplace=True)

    def plot_tsne(self, name="ud", plotpath=None):
        gendata = self.data
        actual = self.data2
        if gendata.shape[0]!=actual.shape[0]:
            if gendata.shape[0]>actual.shape[0]:
                gendata = gendata.iloc[:actual.shape[0],:]
            else:
                actual = actual.iloc[:gendata.shape[0],:]
        n_patients, n_genes = gendata.shape
        label1 = ["Generated Data"]*n_patients
        label2 = ["Actual Data"]*n_patients
        labels = pd.Series(label1+label2).to_frame()
        dfeatures = pd.concat([gendata, actual], ignore_index=True,
                              axis=0, sort=False)
        X_embedded = TSNE(n_components=2, random_state=0,
                          perplexity=100).fit_transform(dfeatures)
        X_embedded = pd.DataFrame(X_embedded, columns=['dim1', 'dim2'])
        X_embedded = pd.DataFrame(
            np.hstack([np.array(X_embedded), np.array(labels)]))
        X_embedded.columns = ['dim1', 'dim2', 'label']

        sns_fig = sns.lmplot(x='dim1', y='dim2', data=X_embedded, fit_reg=False, hue='label')
        filename = "tsne_plot_"
        filename = filename + name + ".png"
        plt.show()#(filename)
        #plt.close()

    def plot_tsne2(self, name="ud", plotpath=None):
        actual = self.data2
        n_patients, n_genes = actual.shape
        label2 = ["Actual Data"]*n_patients
        labels = pd.Series(label2).to_frame()
        #dfeatures = pd.concat([gendata, actual], ignore_index=True,
        #                     axis=0, sort=False)
        X_embedded = TSNE(n_components=2, random_state=0,
                          perplexity=100).fit_transform(actual)
        X_embedded = pd.DataFrame(X_embedded, columns=['dim1', 'dim2'])
        X_embedded = pd.DataFrame(
            np.hstack([np.array(X_embedded), np.array(labels)]))
        X_embedded.columns = ['dim1', 'dim2', 'label']

        sns_fig = sns.lmplot(x='dim1', y='dim2', data=X_embedded, fit_reg=False, hue='label')
        filename = "tsne_plot_"
        filename = filename + name + ".png"
        plt.savefig(filename)
        plt.close()


if __name__=="__main__":
    rd = ReadDatasets(df2_gen.iloc[:,:],df_tlol.iloc[:,:])
    rd.plot_tsne(name="org4")

df2_gen["label"] = 1
df2_gen

df_licit_org = df[df["label"]==2]
df_illicit_gen = df2_gen
df_illicit_org = df[df["label"]==1]
print(df_licit_org, df_illicit_gen, df_illicit_org)

df_licit_org = shuffle(df_licit_org)
df_licit_train = df_licit_org.iloc[:25000,:]
df_licit_test = df_licit_org.iloc[25000:,:]
df_train = pd.concat([df_licit_train, df_illicit_gen])
df_test = pd.concat([df_licit_test, df_illicit_org])
df_train = shuffle(df_train)
df_test = shuffle(df_test)
print(df_train[df_train["label"]==1])
print(df_test[df_test["label"]==1])

X_train = df_train.iloc[:,:-1]
y_train = df_train.iloc[:,[-1]]
X_test = df_test.iloc[:,:-1]
y_test = df_test.iloc[:,[-1]]

y_train

from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
clf = RandomForestClassifier().fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
metrics.plot_roc_curve(clf, X_test, y_test)  # doctest: +SKIP
#plt.savefig("roc_rf")
plt.show()  
roc_auc_score(y_test, y_pred)

dt = df_13.loc[df_13['label'] == 2]
print(dt.shape)

df_gen_added = pd.concat([df.iloc[:,2:],df2_gen])
df_gen_added = df_gen_added.drop(["Feature 167"], axis=1)
df_gen_added

df_gen_added

from sklearn.utils import shuffle
df_gen_added = shuffle(df_gen_added)
df_gen_added

df_gen_added = df_gen_added.astype('float32')

X = df_gen_added.iloc[:,:-1]
y = df_gen_added.iloc[:,[-1]]

y

# Local Features and Aggregate Features
X_local = X.iloc[:,:94]
X_agg = X.iloc[:,94:]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.3)

clf = RandomForestClassifier().fit(X, y)

!matplotlib inline
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
clf = RandomForestClassifier().fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
metrics.plot_roc_curve(clf, X_test, y_test)  # doctest: +SKIP
#plt.savefig("roc_rf")
plt.show()  
roc_auc_score(y_test, y_pred)

feat_importances = pd.Series(clf.feature_importances_, index=X.columns)
feat_importances.nlargest(20).plot(kind='barh')

imp_features = feat_importances.nlargest(20)
imp_features

feature_select = ["Feature 71","Feature 16","Feature 37","Feature 65","Feature 59","Feature 8","Feature 73","Feature 77","Feature 43","Feature 83","Feature 35","Feature 72","Feature 74","Feature 38","Feature 36","Feature 25","Feature 127","Feature 49","Feature 103","Feature 31"]

df_features = df_features.drop(["Feature 167"], axis=1)

df_unlabelled=df_features.loc[df_features['label']=="unknown"]
df_unlabelled["label"].replace({"unknown": 3}, inplace=True)
df_unlabelled = df_unlabelled.drop(["label"],axis=1)
df_unlabelled = df_unlabelled.astype("float")

groups = df_unlabelled.groupby(["Feature 1"])

print(groups.get_group(1))
scaled_features_df = groups.get_group(1)
corr = scaled_features_df.corr()
print(corr)
f = plt.figure(figsize=(19, 15))
plt.matshow(corr, fignum=f.number)
plt.xticks(range(scaled_features_df.shape[1]), scaled_features_df.columns, fontsize=14, rotation=45)
plt.yticks(range(scaled_features_df.shape[1]), scaled_features_df.columns, fontsize=14)
cb = plt.colorbar()
cb.ax.tick_params(labelsize=14)
plt.title('Correlation Matrix', fontsize=16);
plt.show()

upper = corr.where(np.triu(np.ones(corr.shape), k=1).astype(np.bool))
to_drop = [column for column in upper.columns if any(upper[column] > 0.98)]

print(to_drop)

df_preprocessed = scaled_features_df.drop(scaled_features_df[to_drop], axis=1)
df_preprocessed

temp1 = groups.get_group(1)
for i in range(2,43):
    temp1 = pd.concat([temp1, groups.get_group(i)])
temp1

temp1 = temp1.reset_index()
temp1

from sklearn.cluster import KMeans
temp = groups.get_group(1)
temp = temp.iloc[:,2:]
kmeans = KMeans(n_clusters=2, random_state=0).fit(temp)
labels = kmeans.predict(temp)
all_labels = labels
for i in range(2,43):
    temp = groups.get_group(i)
    temp = temp.iloc[:,2:]
    kmeans = KMeans(n_clusters=2, random_state=0).fit(temp)
    labels = kmeans.predict(temp)
    all_labels = np.concatenate((all_labels, labels), axis=0)
print(all_labels)



unique, counts = np.unique(all_labels, return_counts=True)
print(np.asarray((unique, counts)).T)

all_labels[all_labels==0]=2

print(np.isnan(all_labels).any())
all_labels_col= pd.Series(all_labels)
all_labels_col

all_labels_col.isna()

temp1 = temp1.drop(["label"],axis=1)

temp1["label"] = all_labels_col
temp1

X_test = temp1.iloc[:,3:-1]
y_test = temp1.iloc[:,-1]
X_test

y_test

y_pred = clf.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
metrics.plot_roc_curve(clf, X_test, y_test)  # doctest: +SKIP
#plt.savefig("roc_rf")
plt.show()  
roc_auc_score(y_test, y_pred)



actual = temp
n_patients, n_genes = actual.shape
label2 = ["Actual Data"]*n_patients
labels = pd.Series(label2).to_frame()
#dfeatures = pd.concat([gendata, actual], ignore_index=True,
#                     axis=0, sort=False)
X_embedded = TSNE(n_components=2, random_state=0, perplexity=1000).fit_transform(actual)
X_embedded = pd.DataFrame(X_embedded, columns=['dim1', 'dim2'])
X_embedded = pd.DataFrame(
    np.hstack([np.array(X_embedded), np.array(labels)]))
X_embedded.columns = ['dim1', 'dim2', 'label']
sns_fig = sns.lmplot(x='dim1', y='dim2', data=X_embedded, fit_reg=False, hue='label')
filename = "tsne_plot_"
plt.show()#(filename)

